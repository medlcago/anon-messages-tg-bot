from __future__ import annotations

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from keyboards.callback_data import DialogCallback
from utils.states import Dialog

start_dialog_router = Router(name="start_dialog")


@start_dialog_router.callback_query(DialogCallback.filter())
async def start_dialog_callback(callback: CallbackQuery, callback_data: DialogCallback, state: FSMContext):
    await callback.message.edit_text(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ\n\n–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    )
    await state.set_state(Dialog.message)
    await state.update_data(telegram_id=callback_data.telegram_id)


@start_dialog_router.message(Dialog.message)
async def start_dialog(message: Message, state: FSMContext):
    data = await state.get_data()
    telegram_id = data.get("telegram_id")
    try:
        msg = await message.send_copy(
            chat_id=telegram_id
        )

        await msg.reply(
            text="üîî –í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        )

        await message.reply(
            text="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ",
        )
    except ValueError:
        await message.reply(
            text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è üòî"
        )
    finally:
        await state.clear()
